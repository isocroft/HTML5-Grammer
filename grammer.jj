/****************************************************************
 * Codedev Team                                                 *
 * Copyright (c) 2012 Codedev Software, NG Inc                  *
 * All Rights Reserved                                          *
 *                                                              *
 * PROJECT: HTML5 GRAMMER (STOCKBIT)                            *
 * DATE CREATED: 11/08/2012                                     *
 * DEPENDENCIES: None                                           *
 * LAST MODIFIED: 21/12/2013                                    *
 * PROJECT FOR: INFLUXE 1.0 (alpha)                             *
 * TITLE: HTML 5 Grammer based on the W3C HTML5 Reference       *
 * LINK: http://dev.w3.org/html5/html-author/index.html         *
 *                                                              *
 *                                                              *
 ****************************************************************/




// <======================= OPTIONS SECTION =====================>

options {

    STATIC = false;
    UNICODE_INPUT = false;
	FORCE_LA_CHECK = true;
	NODE_SCOPE_HOOK = true;
	TRACE_TOKENS = false;
}

// <======================= PARSER SECTION =====================>

PARSER_BEGIN(H5Parser)

import java.io.*;
import java.util.*;

public class H5Parser {
 
    public H5Parser(InputStream in){
        
    }

	public void jjtreeOpenNodeScope(Node n){
	  //((SimpleNode)n).blob;
	}
	
	public void jjtreeCloseNodeScope(Node n){
	
	}
}

class DocumentNode extends SimpleNode{
 
        public Token doctypeToken;
		private final String doctypeDcl;
		
        public DocumentNode(){
            if(doctypeToken !== null)
			    doctypeDcl = doctypeToken.image;
			else
                doctypeDcl = "#DEFAULT";			
        }
		
		@Override
		public Node jjtGetChild(int i){
	   
	    }
	    @Override
	    public int jjtGetNumChildren(){
	   
	    }
}

class ElementNode implements Node, Cloneable{


       class ElementNode(){
	   
	   }
	   
	   public void jjtOpen(){
		
	   }
	   
	   public void jjtClose(){
		
	   }
	   
	   public void jjtSetParent(Node n){
		   
	   }
		
       public Node jjtGetParent(){
		
	   }
	   
	   public Node jjtGetChild(int i){
	   
	   }
	   
	   public int jjtGetNumChildren(){
	   
	   }

}

class PcdataNode implements Node{

        private String rawtext;
		
        public PcdataNode(String s){
            rawtext = s;
        }

		public void jjtOpen(){
		
		}
		
		public void jjtClose(){
		
		}
		
		public void jjtSetParent(Node n){
		
		}
		
        public Node jjtGetParent(){
		
		}
		
		public Node jjtGetChild(int i){
	   
	    }
	   
	    public int jjtGetNumChildren(){
	   
	    }

}

class AttributeNode implements Node, Cloneable{
        
		private HashMap<String, String> hattr = new HashMap<String, String>();
		
        public AttributeNode(String name, String value){
              hattr.put(name, value);
        }
		
		public void jjtOpen(){
		
		}
		
		public void jjtClose(){
		
		}
		
		public void jjtSetParent(Node n){
		
		}
		
        public Node jjtGetParent(){
		
		}
		
		public Node jjtGetChild(int i){
	        LinkedList lnk = new LinkedList(hattr.keySet());
			String key = lnk.get(i);
			//return (hattr.containsKey(key)) ? hattr.get(n) : null;
	    }
	   
	    public int jjtGetNumChildren(){
	       return hattr.size();
	    }

}
PARSER_END(H5Parser)

// <======================= LEXICAL SECTION =====================>

SKIP :
{
	 <     ( " " | "\t" | "\n" | "\r" )+	           >                         // IGNORE CHARACTERS
}

SPECIAL TOKEN:
{
     <SPC:      ( [" "] )*                              >                        // WHITESPACE
	 <SCHR:     "@"                                     >                        // RUBY ANNOTATION CHARACTER
	 <COMMENTB: "<!" ( ~[">"] )* ">"		            >                        // COMMENT BLOCK
     <COMMTD:   "--"                                    >                        // COMMENT DELIMETER
     <ESCPCHRS: ( "\t" | "\n" | "\r" | "\b" | "\f" )+   >                        // ESCAPE CHARACTERS
     <CTRLCHRS: ()+                                     >                        // CONTROL CHARACTERS	 
}

TOKEN [IGNORE_CASE] :
{
    <DOCTYPE:  "<!DOCTYPE html " ( ~["<"] )* ">"         >                       // DOCUMENT TYPE DECLARATION
	<#AMPERSD: "&"                                       >
    <#SEMICLN: ";"                                       > 
	<CREF: (<AMPERSD> (    "lt"
                          | "gt" 
                          | "apos"
                          | "quot" 
                          | "nbsp"
                          | "raquo"
                          | "laquo"
                          | "reg"
                          | "copy"
                          | "euro"
                       ) <SEMICLN> )+                                            // CHARACTER REFERENCE
	<STAGO:		"<"				                         >	: TAG                // START TAG OPEN
|	<ETAGO:		"</"				                     >	: TAG                // END TAG OPEN
|	<PCDATA:	( <CREF> |  ~["<", "</"] )+	             >                       // RAW TEXT CONTENT
}

<TAG> TOKEN [IGNORE_CASE] :
{
	<A:		    "a"				                         >	: ATTLIST            // TAG NAMES
|   <ABBR:      "abbr"                                   >  : ATTLIST
|	<ADDRESS:	"address"			                     >	: ATTLIST
|	<APPLET:	"applet"			                     >	: ATTLIST
|	<AREA:		"area"				                     >	: ATTLIST
|   <ARTICLE:   "article"                                >  : ATTLIST
|   <ASIDE:     "aside"                                  >  : ATTLIST
|	<AUDIO:		"audio"				                     >	: ATTLIST
|	<B:		    "b"				                         >	: ATTLIST
|	<BASE:		"base"				                     >	: ATTLIST
|	<BASEFONT:	"basefont"			                     >	: ATTLIST
|	<BIG:		"big"				                     >	: ATTLIST
|	<BLOCKQUOTE:"blockquote"			                 >	: ATTLIST
|	<BODY:		"body"				                     >	: ATTLIST
|	<BR:		"br"				                     >	: ATTLIST
|	<CAPTION:	"caption"			                     >	: ATTLIST
|	<CENTER:	"center"			                     >	: ATTLIST
|	<CITE:		"cite"				                     >	: ATTLIST
|	<CODE:		"code"				                     >	: ATTLIST
|   <COL        "col"                                    >  : ATTLIST
|   <COLGROUP   "colgroup"                               >  : ATTLIST
|	<DD:		"dd"				                     >	: ATTLIST
|   <DEL:       "del"                                    >  : ATTLIST
|	<DFN:		"dfn"				                     >	: ATTLIST
|   <DIALOG:    "dialog"                                 >  : ATTLIST
|	<DIR:		"dir"				                     >	: ATTLIST
|	<DIV:		"div"				                     >	: ATTLIST
|	<DL:		"dl"				                     >	: ATTLIST
|	<DT:		"dt"				                     >	: ATTLIST
|	<EM:		"em"				                     >	: ATTLIST
|   <EMBED:     "embed"                                  >  : ATTLIST
|   <FIELDSET   "fieldset"                               >  : ATTLIST
|   <FIGURE:    "figure"                                 >  : ATTLIST
|   <FIGCAPTION:"figcaption"                             >  : ATTLIST
|	<FONT:		"font"				                     >	: ATTLIST
|   <FOOTER:    "footer"                                 >  : ATTLIST
|	<FORM:		"form"				                     >	: ATTLIST
|	<H1:		"h1"				                     >	: ATTLIST
|	<H2:		"h2"				                     >	: ATTLIST
|	<H3:		"h3"				                     >	: ATTLIST
|	<H4:		"h4"				                     >	: ATTLIST
|	<H5:		"h5"				                     >	: ATTLIST
|	<H6:		"h6"				                     >	: ATTLIST
|	<HEAD:		"head"				                     >	: ATTLIST
|   <HEADER:    "header"                                 >  : ATTLIST
| 	<HR:		"hr"				                     >	: ATTLIST
|	<HGROUP:	"hgroup"				                 >	: ATTLIST
|	<HTML:		"html"				                     >	: ATTLIST
|	<I:		    "i"			                             >	: ATTLIST
|   <IFRAME:    "iframe"                                 >  : ATTLIST  
|	<IMG:		"img"				                     >	: ATTLIST
|	<INPUT:		"input"				                     >	: ATTLIST
|   <INS:       "ins"                                    >  : ATTLIST
|	<ISINDEX:	"isindex"			                     >	: ATTLIST
|	<KBD:		"kbd"				                     >	: ATTLIST
|   <LABEL:     "label"                                  >  : ATTLIST
|   <LEGEND:    "legend"                                 >  : ATTLIST
|	<LI:		"li"				                     >	: ATTLIST
|	<LINK:		"link"				                     >	: ATTLIST
|	<MENU:		"menu"				                     >	: ATTLIST
|	<MAP:		"map"				                     >	: ATTLIST
|   <MARK:      "mark"                                   >  : ATTLIST
|	<META:		"meta"				                     >	: ATTLIST
|   <METER:     "meter"                                  >  : ATTLIST
|   <NAV:       "nav"                                    >  : ATTLIST
|   <NOSCRIPT   "noscript"                               >  : ATTLIST
|	<OL:		"ol"				                     >	: ATTLIST
|   <OBJECT:    "object"                                 >  : ATTLIST
|	<OPTION:	"option"			                     >	: ATTLIST
|	<P:		    "p"			                             >	: ATTLIST
|	<PARAM:		"param"				                     >	: ATTLIST
|	<PRE:		"pre"				                     >	: ATTLIST
|   <PROGRESS:  "progress"                               >  : ATTLIST
|	<PROMPT:	"prompt"			                     >	: ATTLIST
|   <Q:         "q"                                      >  : ATTLIST
|   <RP:        "rp"                                     >  : ATTLIST
|   <RUBY:      "ruby"                                   >  : ATTLIST
|   <RT:        "rt"                                     >  : ATTLIST
|	<SAMP:		"samp"				                     >	: ATTLIST
|	<SCRIPT:	"script"			                     >	: ATTLIST
|   <SECTION    "section"                                >  : ATTLIST
|	<SELECT:	"select"			                     >	: ATTLIST
|	<SMALL:		"small"				                     >	: ATTLIST
|	<SOURCE:	"source"				                 >	: ATTLIST
|	<STRIKE:	"strike"			                     >	: ATTLIST
|	<STRONG:	"strong"			                     >	: ATTLIST
|	<STYLE:		"style"				                     >	: ATTLIST
|	<SUB:		"sub"				                     >	: ATTLIST
|	<SUP:		"sup"				                     >	: ATTLIST
|	<TABLE:		"table"				                     >	: ATTLIST
|   <TBODY      "tbody"                                  >  : ATTLIST
|	<TEXTAREA:	"textarea"			                     >	: ATTLIST
|	<TH:		"th"				                     >	: ATTLIST
|	<THEAD:		"thead"				                     >	: ATTLIST
|	<TD:		"td"				                     >	: ATTLIST
|	<TFOOT:		"tfoot"				                     >	: ATTLIST
|   <TIME:      "time"                                   >  : ATTLIST
|	<TITLE:		"title"				                     >	: ATTLIST
|	<TR:		"tr"				                     >	: ATTLIST
|	<TT:		"tt"				                     >	: ATTLIST
|	<U:		    "u"				                         >	: ATTLIST
|	<UL:		"ul"				                     >	: ATTLIST
|	<VAR:		"var"				                     >	: ATTLIST
|	<VIDEO:		"video"				                     >	: ATTLIST
}

<ATTLIST> SKIP :
{
	<		" " | "\f" | "\t" | "\n" | "\r" | "\b"	      >
|	<		"--" 				>	: ATTCOMM
}

<ATTLIST> TOKEN :
{
    <TAGVC      "/>"                                       >                     // VOID TAG CLOSE
|	<TAGC:		">"				                           >  : DEFAULT          // NORMAL TAG CLOSE
|	<A_EQ:		"="				                           >  : ATTRVAL          // ATTRIBUTE EQUALS
|	<#ALPHA:	["a"-"z","A"-"Z","_","-","."]	           >
|	<#NUM:		["0"-"9"]			                       >
|	<#ALPHANUM:	<ALPHA> | <NUM>			                   >
|	<A_NAME:	<SPC> <ALPHA> ( <ALPHANUM> )* <SPC>        >                     // ATTRIBUTE NAME

}

<ATTRVAL> TOKEN :
{
  
  <CDATA: <SPC>  (	
                "'" (  <CREF> | ~["'"] )* "'"                                    // SINGLE-QUOTED ATTRIBUTE VALUE
		|	    "\"" ( <CREF> | ~["\""] )* "\""                                  // DOUBLE-QUOTED ATTRIBUTE VALUE
		|      (  ~[">", "\"", "'", "=", "&", "`", "\t", "\n", "\r"] )+          // NO-QUOTE ATTRIBUTE VALUE
	             ) <SPC>                                    >	: ATTLIST
}

<ATTCOMM> SKIP :
{
	<		( ~["-"] )+			                           >                      // ATTRIBUTE COMMENT
|	<		"-" ( ~["-"] )+			                       >
|	<		"--"				                           >	: ATTLIST
}


// <================== PRODUCTION SECTION ==================>

void pcdata() #void :
{
	Token t;
}
{
	t=<PCDATA>
	{
		jjtree.pushNode(new PcdataNode(t.image));
	}
}


void attribute() #AttributeNode(jjtree.arity() > 0) :
{
	Token n, v = null;
}
{
	n=<A_NAME> [ <A_EQ> v=<CDATA> ]
	{
		String attval;
		if (v == null) {
			attval = "#DEFAULT";
		} else {
			attval = v.image;
		}
		jjtree.pushNode(new AttributeNode(n.image, attval));
	}
}

void attlist() : {}
{
	( attribute() )+
}

void Eheading() #void : {}
{
	LOOKAHEAD(2) h1()
|	LOOKAHEAD(2) h2()
|	LOOKAHEAD(2) h3()
|	LOOKAHEAD(2) h4()
|	LOOKAHEAD(2) h5()
|	LOOKAHEAD(2) h6()
|                hgroup()
}

void Epreformatted() #void : {}
{
	pre()
}

void Elist() #void : {}
{
	LOOKAHEAD(2) ul()
|	LOOKAHEAD(2) ol()
|	LOOKAHEAD(2) dir()
|	             menu()
}

void Efont() #void : {}
{
	LOOKAHEAD(2) tt()
|	LOOKAHEAD(2) i()
|	LOOKAHEAD(2) b()
|	LOOKAHEAD(2) u()
|	LOOKAHEAD(2) strike()
|	LOOKAHEAD(2) big()
|	LOOKAHEAD(2) small()
|	LOOKAHEAD(2) sub()
|	LOOKAHEAD(2) q()
|	LOOKAHEAD(2) sup()
}

void Ephrasing() #void : {}
{
	LOOKAHEAD(2) em()
|	LOOKAHEAD(2) abbr()
|	LOOKAHEAD(2) strong()
|	LOOKAHEAD(2) dfn()
|	LOOKAHEAD(2) code()
|   LOOKAHEAD(2) del()
|   LOOKAHEAD(2) ins()
|	LOOKAHEAD(2) samp()
|	LOOKAHEAD(2) kbd()
|	LOOKAHEAD(2) _var()
|	LOOKAHEAD(2) mark()
|	             cite()
}

void Eembedded() #void : {}
{
	LOOKAHEAD(2) meter()
|   LOOKAHEAD(2) style()
|	LOOKAHEAD(2) script()
|	LOOKAHEAD(2) progress()	
|	LOOKAHEAD(2) img()
|	LOOKAHEAD(2) font()
|	LOOKAHEAD(2) basefont()
|	             br()

}

 
void EInteractive() #void : {}
{
    LOOKAHEAD(2) a()
|   LOOKAHEAD(2) textarea()
|   LOOKAHEAD(2) audio()
|	LOOKAHEAD(2) map()
|   LOOKAHEAD(2) video()
|   LOOKAHEAD(2) input()
|	LOOKAHEAD(2) applet()
|	LOOKAHEAD(2) object()
|	LOOKAHEAD(2) embed()
|                select()
}


void Etext() #void : {}
{
	             pcdata()
|	LOOKAHEAD(2) Efont()
|	LOOKAHEAD(2) Ephrasing()
|	             Eembedded()
}


void tt() : {}
{
	<STAGO> <TT> [ attlist() ] <TAGC> ( LOOKAHEAD(2) Etext() | EInteractive()  )* <ETAGO> <TT> <TAGC>
}

void i() : {}
{
	<STAGO> <I> [ attlist() ] <TAGC> ( LOOKAHEAD(2) Etext() | EInteractive()  )* <ETAGO> <I> <TAGC>
}

void b() : {}
{
	<STAGO> <B> [ attlist() ] <TAGC> ( LOOKAHEAD(2) Etext() | EInteractive()  )* <ETAGO> <B> <TAGC>
}

void u() : {}
{
	<STAGO> <U> [ attlist() ] <TAGC> ( LOOKAHEAD(2) Etext() | EInteractive()  )* <ETAGO> <U> <TAGC>
}

void strike() : {}
{
	<STAGO> <STRIKE> [ attlist() ] <TAGC>
	( LOOKAHEAD(2) Etext() | EInteractive()  )*
	<ETAGO> <STRIKE> <TAGC>
}

void del() : {}
{ 
    <STAGO> <DEL> [ attlist() ] <TAGC>
	( LOOKAHEAD(2) Etext() | EInteractive()  )*
	<ETAGO> <DEL> <TAGC>
}

void ins() : {}
{
    <STAGO> <INS> [ attlist() ] <TAGC>
	 ( LOOKAHEAD(2) Etext() | EInteractive()  )*
	<ETAGO> <INS> <TAGC>
}

void big() : {}
{
	<STAGO> <BIG> [ attlist() ] <TAGC> ( LOOKAHEAD(2) Etext() | EInteractive()  )* <ETAGO> <BIG> <TAGC>
}

void small() : {}
{
	<STAGO> <SMALL> [ attlist() ] <TAGC>
	( LOOKAHEAD(2) Etext() | EInteractive()  )*
	<ETAGO> <SMALL> <TAGC>
}

void mark() : {}
{
    <STAGO> <MARK> [ attlist() ] <TAGC>
	( LOOKAHEAD(2) Etext() | EInteractive()  )*
	<ETAGO> <MARK> <TAGC>
}

void sub() : {}
{
	<STAGO> <SUB> [ attlist() ] <TAGC> ( LOOKAHEAD(2) Etext() | EInteractive()  )* <ETAGO> <SUB> <TAGC>
}

void sup() : {}
{
	<STAGO> <SUP> [ attlist() ] <TAGC> ( LOOKAHEAD(2) Etext() | EInteractive()  )* <ETAGO> <SUP> <TAGC>
}

void abbr() : {}
{
    <STAGO> <ABBR> [ attlist() ] <TAGC>
	( LOOKAHEAD(2) Etext() | EInteractive()  )*
	<ETAGO> <ABBR> <TAGC>
}

void em() : {}
{
	<STAGO> <EM> [ attlist() ] <TAGC> ( LOOKAHEAD(2) Etext() | EInteractive()  )* <ETAGO> <EM> <TAGC>
}

void strong() : {}
{
	<STAGO> <STRONG> [ attlist() ] <TAGC>
	( LOOKAHEAD(2) Etext() | EInteractive()  )*
	<ETAGO> <STRONG> <TAGC>
}


void dfn() : {}
{
	<STAGO> <DFN> [ attlist() ] <TAGC> ( LOOKAHEAD(2) Etext() | EInteractive()  )* <ETAGO> <DFN> <TAGC>
}

void code() : {}
{
	<STAGO> <CODE> [ attlist() ] <TAGC> ( LOOKAHEAD(2) Etext() | EInteractive()  )* <ETAGO> <CODE> <TAGC>
}

void samp() : {}
{
	<STAGO> <SAMP> [ attlist() ] <TAGC> ( LOOKAHEAD(2) Etext() | EInteractive()  )* <ETAGO> <SAMP> <TAGC>
}

void kbd() : {}
{
	<STAGO> <KBD> [ attlist() ] <TAGC> ( LOOKAHEAD(2) Etext() | EInteractive()  )* <ETAGO> <KBD> <TAGC>
}

void _var() : {}
{
	<STAGO> <VAR> [ attlist() ] <TAGC> ( LOOKAHEAD(2) Etext() | EInteractive()  )* <ETAGO> <VAR> <TAGC>
}

void cite() : {}
{
	<STAGO> <CITE> [ attlist() ] <TAGC> ( LOOKAHEAD(2) Etext() | EInteractive()  )* <ETAGO> <CITE> <TAGC>
}


void font() : {}
{
	<STAGO> <FONT> [ attlist() ] <TAGC> ( LOOKAHEAD(2) Etext() | EInteractive()  )* <ETAGO> <FONT> <TAGC>
}


void basefont() : {}
{
	<STAGO> <BASEFONT> [ attlist() ] <TAGVC>
}

void meter() : {}
{
    <STAGO> <METER> [ attlist() ] <TAGC> ( Etext() )* <ETAGO> <METER> <TAGC>
}

void progress() : {}
{
    <STAGO> <PROGRESS> [ attlist() ] <TAGC> ( Etext() )* <ETAGO> <PROGRESS> <TAGC>
}

void br() : {}
{
	<STAGO> <BR> [ attlist() ] <TAGVC>
}


void Eblock() #void : {}
{
	LOOKAHEAD(2) p()
|	LOOKAHEAD(2) Elist()
|	LOOKAHEAD(2) Epreformatted()
|	LOOKAHEAD(2) dl()
|	LOOKAHEAD(2) div()
|	LOOKAHEAD(2) center()
|	LOOKAHEAD(2) blockquote()
|   LOOKAHEAD(2) figure()
|	LOOKAHEAD(2) form()
|	LOOKAHEAD(2) isindex()
|	LOOKAHEAD(2) hr()
|	LOOKAHEAD(2) table()

}

void Eflow() #void : {}
{
	(LOOKAHEAD(2)
		(	LOOKAHEAD(2) Etext()
	    |   LOOKAHEAD(2) EIteractive()
		|                Eblock()
		)
	)*
}


void Ebody_content() #void : {}
{
	(LOOKAHEAD(2)
		(	LOOKAHEAD(2) Eheading()
		|	LOOKAHEAD(2) Etext()
		|   LOOKAHEAD(2) EInteractive()
		|	LOOKAHEAD(2) Eblock()
		|	             address()
		)
	)*
   (LOOKAHEAD(2) aside() )?
}

void ESectioning() #void : {}
{
        |   LOOKAHEAD(2) article()
		|   LOOKAHEAD(2) section()
		|                nav()
}

void body() : {}
{
	[ LOOKAHEAD(2) <STAGO> <BODY> [ attlist() ] <TAGC> ]
	    (LOOKAHEAD(2) header() )?  Ebody_content()  (LOOKAHEAD(2) footer() )?
	[ LOOKAHEAD(2) <ETAGO> <BODY> <TAGC> ]
}

void noscript() : {}
{
    <STAGO> <NOSCRIPT> [ attlist() ] <TAGC>
	    (LOOKAHEAD(2) 
	               (   LOOKAHEAD(2) Etext() 
				    |               Emetadata()
					)
	    )*
	<ETAGO> <NOSCRIPT> <TAGC>
}

void address() : {}
{
	<STAGO> <ADDRESS> [ attlist() ] <TAGC>
	( LOOKAHEAD(2) Etext() | p() )*
	<ETAGO> <ADDRESS> <TAGC>
}

void header() : {}
{
        <STAGO> <HEADER> [ attlist() ] <TAGC> ( LOOKAHAED(2) Eheading() | Eflow() )* <ETAGO> <HEADER> <TAGC>
}

void footer() : {}
{
        <STAGO> <FOOTER> [ attlist() ] <TAGC> ( Eflow() )* <ETAGO> <FOOTER> <TAGC>
}

void dialog() : {}
{
       <STAGO> <DIALOG> [ attlist() ] <TAGC> ( dt() dd() )* <ETAGO> <DIALOG> <TAGC>
}

void ruby() : {}
{
        <STAGO> <RUBY> [ attlist() ] <TAGC> rt() ( rp() rt() )* <ETAGO> <RUBY> <TAGC>
}

void rt() : {}
{
       <STAGO> <RT> [ attlist() ] <TAGC> ( Ephrasing() )* <ETAGO> <RT> <TAGC>
}

void rp() : {}
{
       <STAGO> <RP> [ attlist() ] <TAGC> <SCHR> <ETAGO> <RP> <TAGC>
}

void aside() : {}
{
        <STAGO> <ASIDE> [ attlist() ] <TAGC>
		  (LOOKAHEAD(2) header() )?  Ebody_content()  (LOOKAHEAD(2) footer() )? 
		<ETAGO> <ASIDE> <TAGC>
}

void section() : {}
{
        <STAGO> <SECTION> [ attlist() ] <TAGC>
		  (LOOKAHEAD(2) header() )? Ebody_content()  (LOOKAHEAD(2) footer() )? 
		<ETAGO> <SECTION> <TAGC>
}

void nav() : {}
{
        <STAGO> <NAV> [ attlist() ] <TAGC>
		 (LOOKAHEAD(2) Etext() | EInteractive )*
		<ETAGO> <NAV> <TAGC>
}

void article() : {}
{
        <STAGO> <ARTICLE> [ attlist() ] <TAGC> 
		  (LOOKAHEAD(2) header() )? (Ebody_content() ) (LOOKAHEAD(2) footer() )? 
	    <ETAGO> <ARTICLE> <TAGC>
}

void div() : {}
{
	<STAGO> <DIV> [ attlist() ] <TAGC>
	  Ebody_content()
	<ETAGO> <DIV> <TAGC>
}


void center() : {}
{
	<STAGO> <CENTER> [ attlist() ] <TAGC>
	 Ebody_content()
	<ETAGO> <CENTER> <TAGC>
}


void a() : {}
{
	<STAGO> <A> [ attlist() ] <TAGC> ( Etext() )* <ETAGO> <A> <TAGC>
}


void map() : {}
{
	<STAGO> <MAP> [ attlist() ] <TAGC> ( area() )* <ETAGO> <MAP> <TAGC>
}


void area() : {}
{
	<STAGO> <AREA> [ attlist() ] <TAGVC>
}


void link() : {}
{
	<STAGO> <LINK> [ attlist() ] <TAGVC>
}


void img() : {}
{
	<STAGO> <IMG> [ attlist() ] <TAGVC>
}

void q() : {}
{
     <STAGO> <Q> [ attlist() ] <TAGC>
	 ( LOOKAHEAD(2) Etext() | EInteractive() )*
	 <ETAGO> <Q> <TAGC>
}

// inclusion exception: param()
void applet() : {}
{
	<STAGO> <APPLET> [ attlist() ] <TAGC>
	( LOOKAHEAD(2) param() | Etext() )*
	<ETAGO> <APPLET> <TAGC>
}


void param() : {}
{
	<STAGO> <PARAM> [ attlist() ] <TAGVC>
}


void hr() : {}
{
	<STAGO> <HR> [ attlist() ] <TAGVC>
}


void p() : {}
{
	<STAGO> <P> [ attlist() ] <TAGC>
	( LOOKAHEAD(2) Etext() )*
	[ LOOKAHEAD(2) <ETAGO> <P> <TAGC> ]
}

void hgroup() : {}
{
    <STAGO> <HGROUP> [ attlist() ] <TAGC>
	( LOOKAHEAD(2) h2() | h1() )*
	<ETAGO> <HGROUP> <TAGC>
}

void h1() : {}
{
	<STAGO> <H1> [ attlist() ] <TAGC>
	( LOOKAHEAD(2) Etext() )*
	<ETAGO> <H1> <TAGC>
}

void h2() : {}
{
	<STAGO> <H2> [ attlist() ] <TAGC>
	( LOOKAHEAD(2) Etext() )*
	<ETAGO> <H2> <TAGC>
}

void h3() : {}
{
	<STAGO> <H3> [ attlist() ] <TAGC>
	( LOOKAHEAD(2) Etext() )*
	<ETAGO> <H3> <TAGC>
}

void h4() : {}
{
	<STAGO> <H4> [ attlist() ] <TAGC>
	( LOOKAHEAD(2) Etext() )*
	<ETAGO> <H4> <TAGC>
}

void h5() : {}
{
	<STAGO> <H5> [ attlist() ] <TAGC>
	( LOOKAHEAD(2) Etext() )*
	<ETAGO> <H5> <TAGC>
}

void h6() : {}
{
	<STAGO> <H6> [ attlist() ] <TAGC>
	( LOOKAHEAD(2) Etext() )*
	<ETAGO> <H6> <TAGC>
}


// exclusion exception: img(), big(), small(), sub(), sup(), font()
void pre() : {}
{
	<STAGO> <PRE> [ attlist() ] <TAGC>
	( LOOKAHEAD(2) Etext() )*
	<ETAGO> <PRE> <TAGC>
}


void blockquote() : {}
{
	<STAGO> <BLOCKQUOTE> [ attlist() ] <TAGC>
	Ebody_content()
	<ETAGO> <BLOCKQUOTE> <TAGC>
}

// inclusion exception: legend()
void figure() : {}
{
       <STAGO> <FIGURE> [ attlist() ] <TAGC>
       [ LOOKAHEAD(2) legend() ]  Eflow()
       <ETAGO> <FIGURE> <TAGC>
}

void dl() : {}
{
	<STAGO> <DL> [ attlist() ] <TAGC>
	( LOOKAHEAD(2) dt() | dd() )*
	<ETAGO> <DL> <TAGC>
}


void dt() : {}
{
	<STAGO> <DT> [ attlist() ] <TAGC>
	( LOOKAHEAD(2) Etext() )*
	[ LOOKAHEAD(2) <ETAGO> <DT> <TAGC> ]
}


void dd() : {}
{
	<STAGO> <DD> [ attlist() ] <TAGC>
	Eflow()
	[ LOOKAHEAD(2) <ETAGO> <DD> <TAGC> ]
}


void ol() : {}
{
	<STAGO> <OL> [ attlist() ] <TAGC> ( li() )* <ETAGO> <OL> <TAGC>
}


void ul() : {}
{
	<STAGO> <UL> [ attlist() ] <TAGC> ( li() )* <ETAGO> <UL> <TAGC>
}


// exclusion exception: Eblock()
void dir() : {}
{
	<STAGO> <DIR> [ attlist() ] <TAGC> ( li() )* <ETAGO> <DIR> <TAGC>
}


// exclusion exception: Eblock()
void menu() : {}
{
	<STAGO> <MENU> [ attlist() ] <TAGC> ( li() )* <ETAGO> <MENU> <TAGC>
}


void li() : {}
{
	<STAGO> <LI> [ attlist() ] <TAGC>
	Eflow()
	[ LOOKAHEAD(2) <ETAGO> <LI> <TAGC> ]
}


// exclusion exception: form()
void form() : {}
{
	<STAGO> <FORM> [ attlist() ] <TAGC>
	  Ebody_content()
	<ETAGO> <FORM> <TAGC>
}

void audio() : {}
{
    <STAGO> <AUDIO> [ attlist() ] <TAGC>
	 ( source() )+
	<ETAGO> <AUDIO> <TAGC>
}

void video() : {}
{
    <STAGO> <VIDEO> [ attlist() ] <TAGC>
	 ( source() )+
	<ETAGO> <VIDEO> <TAGC>
}

void object() : {}
{
     <STAGO> <OBJECT> [ attlist() ] <TAGC>
	 ( param() )*
	<ETAGO> <OBJECT> <TAGC>
}

void embed() : {}
{
     <STAGO> <EMBED> [ attlist() ] <TAGVC>
}

void source() : {}
{
	<STAGO> <SOURCE> [ attlist() ] <TAGVC>
}

void input() : {}
{
	<STAGO> <INPUT> [ attlist() ] <TAGVC>
}


void select() : {}
{
	<STAGO> <SELECT> [ attlist() ] <TAGC>
	 ( option() )+ 
	<ETAGO> <OPTION> <TAGC>
}


void option() : {}
{
	<STAGO> <OPTION> [ attlist() ] <TAGC>
	( pcdata() )*
	[ LOOKAHEAD(2) <ETAGO> <OPTION> <TAGC> ]
}


void textarea() : {}
{
	<STAGO> <TEXTAREA> [ attlist() ] <TAGC>
	( pcdata() )*
	<ETAGO> <TEXTAREA> <TAGC>
}


void table() : {}
{
	<STAGO> <TABLE> [ attlist() ] <TAGC>
	[ LOOKAHEAD(2) caption() ] ( tr() )+
	<ETAGO> <TABLE> <TAGC>
}


void tr() : {}
{
	<STAGO> <TR> [ attlist() ] <TAGC>
	( LOOKAHEAD(2) ( LOOKAHEAD(2) th() | td()) )*
	[ LOOKAHEAD(2) <ETAGO> <TR> <TAGC> ]
}


void th() : {}
{
	<STAGO> <TH> [ attlist() ] <TAGC>
	Ebody_content()
	[ LOOKAHEAD(2) <ETAGO> <TH> <TAGC> ]
}

void td() : {}
{
	<STAGO> <TD> [ attlist() ] <TAGC>
	Ebody_content()
	[ LOOKAHEAD(2) <ETAGO> <TD> <TAGC> ]
}


void caption() : {}
{
	<STAGO> <CAPTION> [ attlist() ] <TAGC>
	( Etext() )*
	<ETAGO> <CAPTION> <TAGC>
}

void figcaption() : {}
{
	<STAGO> <FIGCAPTION> [ attlist() ] <TAGC>
	( Etext() )*
	<ETAGO> <FIGCAPTION> <TAGC>
}


// This is a hack to fake the inclusion exceptions within HEAD
// elements.
void Emetadata() #void : {}
{
	(LOOKAHEAD(2)
		(	  LOOKAHEAD(2) style()
		  |	  LOOKAHEAD(2) script()
          |	  LOOKAHEAD(2) meta()
		  |	  LOOKAHEAD(2) link()   
		)
	)*
    (LOOKAHEAD(2) isindex() )?
          
}

void Ehead_misc() #void : {}
{
   (LOOKAHAED(2) title()  | noscript() | base() )?   
}

// inclusion exception: (Ehead_misc)=>Emetadata
// should use & connector: title() & (isindex())? & base()?
void head() : {}
{
	[ LOOKAHEAD(2) <STAGO> <HEAD> [ attlist() ] <TAGC> ]
	[ LOOKAHEAD(2) Ehead_misc() ] Emetadata()
	[ LOOKAHEAD(2) <ETAGO> <HEAD> <TAGC> ]
}

// exclusion exception: (Ehead_misc)=>Emetadata
void title() : {}
{
	<STAGO> <TITLE> [ attlist() ] <TAGC>
	( pcdata() )*
	<ETAGO> <TITLE> <TAGC>
}

void isindex() : {}
{
	<STAGO> <ISINDEX> [ attlist() ] <TAGVC>
}


void base() : {}
{
	<STAGO> <BASE> [ attlist() ] <TAGVC>
}


void meta() : {}
{
	<STAGO> <META> [ attlist() ] <TAGVC>
}


// exclusion exception: Ehead_misc()
void style() : {}
{
	<STAGO> <STYLE> [ attlist() ] <TAGC>
	( pcdata() )*
	<ETAGO> <SCRIPT> <TAGC>
}


// exclusion exception: Ehead_misc()
void script() : {}
{
	<STAGO> <SCRIPT> [ attlist() ] <TAGC>
	( pcdata() )*
	<ETAGO> <SCRIPT> <TAGC>
}


DocumentNode html(jjtThis.doctypeToken = <DOCTYPE>) : {}
{
	[ LOOKAHEAD(2) <STAGO> <HTML> [ attlist() ] <TAGC> ]
	head() body()
	[ LOOKAHEAD(2) <ETAGO> <HTML> <TAGC> ]
	{
		return jjtThis;
	}
}

// <=============== END ALL SECTIONS =================>
